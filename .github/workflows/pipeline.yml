name: bryti
run-name: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  pipeline_id: ${{ github.run_id }}.${{ github.run_number }}.${{ github.run_attempt }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            Pipfile.lock
            src/
            tests/
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pipenv'
      - name: Set up pipenv
        run: |
          echo "[*] Installing pipenv..."
          pip install pipenv
          echo "[*] Syncing `Pipfile.lock`..."
          pipenv sync --dev
      - name: Run linter
        run: pipenv run black --check src
      - name: Run unit tests
        run: pipenv run pytest --cov=src tests/unit/
      - name: Build artifact
        run: |
          echo "[*] Setting up artifact workspace..."
          mkdir package/
          echo "[*] Downloading dependencies..."
          pipenv requirements > requirements.txt
          pipenv run pip install -t package/ -r requirements.txt
          echo "[*] Copying source files..."
          cp -r src package/
          echo "[*] Zipping workspace..."
          cd package/
          zip -r ../artifact-$pipeline_id.zip .
          cd ..
          echo "[*] Cleaning up workspace..."
          rm -r requirements.txt package/
          ls -Ahl
      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          path: artifact-${{ env.pipeline_id }}.zip
          if-no-files-found: error
#  deploy:
#    name: Deploy
#    runs-on: ubuntu-latest
#    steps:
#
#  validate:
#    name: Validate
#    runs-on: ubuntu-latest
#    steps:
#      - name: Run integration tests
#        run: pipenv run behave
