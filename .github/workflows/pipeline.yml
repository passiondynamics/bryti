name: bryti
run-name: ${{github.run_id}}.${{github.run_number}}.${{github.run_attempt}}
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  pipeline_id: ${{github.run_id}}.${{github.run_number}}.${{github.run_attempt}}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            cft.yml
            Pipfile.lock
            src/
            tests/
          persist-credentials: false
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pipenv'
      - name: Set up pipenv
        run: |
          echo "[*] Installing pipenv..."
          pip install pipenv
          echo "[*] Syncing `Pipfile.lock`..."
          pipenv sync --dev
      - name: Run linter
        run: pipenv run black --check src
      - name: Run unit tests
        run: pipenv run pytest --cov=src tests/unit/
      # Because we can't derive env variables from other env variables..
      - name: Set artifact filename
        run: echo "artifact_filename=artifact-$pipeline_id.zip" | tee -a $GITHUB_ENV
      - name: Build artifact
        run: |
          echo "[*] Setting up artifact bundle content..."
          mkdir package/
          echo "[*] Downloading dependencies..."
          pipenv requirements > requirements.txt
          pipenv run pip install -t package/ -r requirements.txt
          echo "[*] Copying source files..."
          cp -r src package/
          echo "[*] Bundling artifact..."
          cd package/
          zip -r ../$artifact_filename .
          cd ..
          echo "[*] Cleaning up workspace..."
          rm -r requirements.txt package/
          ls -Ahl
      - name: Store artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.artifact_filename}}
          path: |
            ${{env.artifact_filename}}
            cft.yml
          if-no-files-found: error
    outputs:
      artifact_filename: ${{env.artifact_filename}}
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    env:
      artifact_filename: ${{needs.build.outputs.artifact_filename}}
    steps:
      - name: Check outputs
        run: echo ${{env.artifact_filename}}
      - name: Retrieve artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{env.artifact_filename}}
      - name: Check directory
        run: ls -Ahl
      - name: Deploy using CFT
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: bryti-dev
          template: cft.yml
          parameter-overrides: >-
            Component="bryti",
            Env="dev",
            ArtifactFilePath=${{env.artifact_filename}}
          tags: '[{"Key": "env", "Value": "dev"}]'

#
#  validate:
#    name: Validate
#    runs-on: ubuntu-latest
#    steps:
#      - name: Run integration tests
#        run: pipenv run behave
